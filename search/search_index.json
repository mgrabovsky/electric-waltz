{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Electric Waltz","text":"<p>A simple deterministc model of the electric energy system of the Czech Republic.</p> <p> </p> <p>This project aims to construct an open-source model of the Czech electricity system.</p> <p>The basic features of the model currently include:</p> <ul> <li>Calculating unit commitment of power sources for each hour of the year.</li> <li>Calculating the generation of intermittent sources (photoltaic, wind) according to their assumed hourly capacity factor (supplied as part of input).</li> <li>Dispatching flexible sources, storage and import/export in a specified merit order.<ul> <li>The default merit order is as follows: baseload and intermittent sources (nuclear, PV, wind) \u2192 storage \u2192 hydro \u2192 biomass \u2192 natural gas \u2192 cross-border import.</li> </ul> </li> <li>Redirecting of surplus generation to storage units (pumped water, batteries, power-to-gas) and discharging them when demand rises.</li> <li>Basic modelling of power plant self-consumption, storage inefficiency (only at charging time at the moment) and transmission/distribution losses in the grid.</li> <li>Basic modelling of thermal power plants with constraints in minimum load, minimum uptime/downtime and linear startup times.</li> <li>Configuration of grid elements and properties using a YAML file.</li> <li>Export of hourly data to CSV.</li> </ul> <p>The model is wholly deterministic, i.e. the output is only affected by the supplied input data and there are no elements of randomness in the simulation process.</p>"},{"location":"#example-output","title":"Example output","text":"<p>The basic output of the model runner is the following table summarising the key flows in the model:</p> <pre><code>Total net generation          107,141,867 MWh\n\u251c\u2500 Total inflexible            60,516,587\n\u2502  \u251c\u2500 Nuclear                  19,033,918\n\u2502  \u251c\u2500 Solar PV                 23,951,325\n\u2502  \u2514\u2500 On-shore wind            17,531,344\n\u2514\u2500 Total flexible              46,625,280\n   \u251c\u2500 Hydro                     7,899,128\n   \u251c\u2500 Biomass                  24,121,364\n   \u2514\u2500 Natural gas              14,604,788\n\nTotal charging consumption      2,880,642 MWh   1061 hrs\nTotal discharging               1,986,646        770 hrs\n\nTotal export                      540,868        360 hrs\nTotal import                    3,189,288       2373 hrs\nImport balance                  2,648,420\n\nTotal surplus/dump                274,023        172 hrs\nTotal shortage (EENS, LOLE)     1,473,203        997 hrs\n\nTotal net consumption         102,864,123 MWh\n\nModel output written to \u2018sandbox/model_output.csv\u2019\n</code></pre> <p>The runner also generates a CSV file with the generation/output of each electricity source in every hour of the modelled period. This data can be used to plot the time series of demand, power generation, import/export, etc., such as the following:</p> <p></p>"},{"location":"#history","title":"History","text":"<p>A first version of this model was devised by Jan Rovensk\u00fd and implemented in an Excel spreadsheet. This project is a rewrite of that model in Python which provides greater flexibility and maintainability. It makes the model easier to expand and customise.</p>"},{"location":"#licence","title":"Licence","text":"<p>This project is licensed under the Blue Oak Model License 1.0.0.</p>"},{"location":"cross-border/","title":"Cross-Border Transmission","text":"<p>Objects for cross-border electricity transmission, i.e. import and export.</p>"},{"location":"cross-border/#electric_waltz.cross_border.CrossBorderTerminal","title":"<code>CrossBorderTerminal</code>","text":"<p>General class for any kind of cross-border transmission device. Used for accounting for cross-border import and export of electricity.</p>"},{"location":"cross-border/#electric_waltz.cross_border.CrossBorderTerminal.net_import","title":"<code>net_import</code>  <code>property</code>","text":"<p>Return net imported power. This value is negative if export dominates.</p>"},{"location":"cross-border/#electric_waltz.cross_border.CrossBorderTerminal.__init__","title":"<code>__init__(capacity)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>capacity</code> <code>Power</code> <p>Nominal maximum capacity of the terminal in MW.</p> required"},{"location":"cross-border/#electric_waltz.cross_border.CrossBorderTerminal.export_at","title":"<code>export_at(power)</code>","text":"<p>Request the export of at most <code>power</code> MW of electricity through the terminal.</p> <p>Parameters:</p> Name Type Description Default <code>power</code> <code>Power</code> <p>Requested power in MW.</p> required <p>Returns:</p> Type Description <code>Power</code> <p>Net exported power after the adjustment.</p>"},{"location":"cross-border/#electric_waltz.cross_border.CrossBorderTerminal.import_at","title":"<code>import_at(power)</code>","text":"<p>Request the import of at most <code>power</code> MW of electricity through the terminal.</p> <p>Parameters:</p> Name Type Description Default <code>power</code> <code>Power</code> <p>Requested power in MW.</p> required <p>Returns:</p> Type Description <code>Power</code> <p>Net imported power after the adjustment.</p>"},{"location":"dispatch/","title":"Source Dispatching","text":"<p>Objects for dispatching flexible power sources.</p>"},{"location":"dispatch/#electric_waltz.dispatch.SourceDispatcher","title":"<code>SourceDispatcher</code>","text":""},{"location":"dispatch/#electric_waltz.dispatch.SourceDispatcher.__init__","title":"<code>__init__(units)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>units</code> <code>Sequence[DispatchableSource]</code> <p>Finite sequence of dispatchable power sources that this dispatcher controls. The order of sources in the list determines the merit order of dispatch, i.e. the first source in the list is dispatched first whenever needed.</p> required"},{"location":"dispatch/#electric_waltz.dispatch.StorageDispatcher","title":"<code>StorageDispatcher</code>","text":""},{"location":"dispatch/#electric_waltz.dispatch.StorageDispatcher.charge_at","title":"<code>charge_at(power)</code>","text":"<p>Try to charge all available storage units with 'power' MW. Return charging power.</p>"},{"location":"dispatch/#electric_waltz.dispatch.StorageDispatcher.discharge_at","title":"<code>discharge_at(power)</code>","text":"<p>Try to discharge all available storage units up to 'power' MW. Return discharging power.</p>"},{"location":"scenario/","title":"Scenarios","text":"<p>Structures for working with clearly defined scenarios.</p>"},{"location":"scenario/#electric_waltz.scenario.Scenario","title":"<code>Scenario</code>","text":""},{"location":"scenario/#electric_waltz.scenario.Scenario.num_steps","title":"<code>num_steps</code>  <code>property</code>","text":"<p>Return the number of discrete time steps in this simulated scenario.</p>"},{"location":"scenario/#electric_waltz.scenario.Scenario.__init__","title":"<code>__init__(*, load, baseload_sources, flexible_sources, intermittent_sources, storage_units, cross_border=None, grid_losses=0.0)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>load</code> <code>Sequence[Power]</code> <p>Time series of net load for each time step in MW.</p> required <code>baseload_sources</code> <code>list[NonDispatchableSource]</code> <p>List of baseload power sources, e.g. nuclear power plants.</p> required <code>flexible_sources</code> <code>list[DispatchableSource]</code> <p>List of dispatchable (flexible) power sources or peaking power plants, e.g. biomass or natural gas-fuelled power plants. Merit order (order of dispatch) is given by the position of the source in the sequence.</p> required <code>intermittent_sources</code> <code>list[tuple[NonDispatchableSource, Sequence[float]]]</code> <p>List of intermittent (inflexible) power sources, e.g. wind or solar photovoltaic power plants. The second entry in the tuple is a time series of capacity factor for the source in each time step.</p> required <code>storage_units</code> <code>list[EnergyStorage]</code> <p>List of electricity storage units.</p> required <code>cross_border</code> <code>Optional[CrossBorderTerminal]</code> <p>A single cross-border export/import facility.</p> <code>None</code> <code>grid_losses</code> <code>float</code> <p>Losses in the grid (transmission and distribution) as a portion of net load. A number in the interval [0, 1).</p> <code>0.0</code>"},{"location":"scenario/#electric_waltz.scenario.Scenario.run","title":"<code>run()</code>","text":"<p>Run the scenario and return time series of statistics on each object in the grid.</p> <p>Returns:</p> Type Description <code>ScenarioRun</code> <p>Object containing time series of electricity source utilisation, storage utilisation, export/import statistics, etc.</p>"},{"location":"scenario/#electric_waltz.scenario.ScenarioRun","title":"<code>ScenarioRun</code>","text":""},{"location":"scenario/#electric_waltz.scenario.ScenarioRun.__init__","title":"<code>__init__(power_sources, storage_units, cross_border=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>power_sources</code> <code>Sequence[PowerSource]</code> <p>Sequence of electricity sources in the grid.</p> required <code>storage_units</code> <code>Sequence[EnergyStorage]</code> <p>Sequence of electricity storage units/aggregates in the grid.</p> required <code>cross_border</code> <code>Optional[CrossBorderTerminal]</code> <p>Optional facility for cross-border export/import of electric power.</p> <code>None</code>"},{"location":"scenario/#electric_waltz.scenario.ScenarioRun.sweep","title":"<code>sweep()</code>","text":"<p>Collect statistics from all registered objects.</p>"},{"location":"source/","title":"Power Sources","text":"<p>Objects and functions for electricity storage.</p>"},{"location":"source/#electric_waltz.source.DispatchableSource","title":"<code>DispatchableSource</code>","text":"<p>               Bases: <code>PowerSource</code></p> <p>Class representing dispatchable (flexible) sources of electricity and power plants. Typically, these include coal-fired, hydroelectric, natural gas or biomass-fuelled power plants.</p>"},{"location":"source/#electric_waltz.source.DispatchableSource.dispatch_at","title":"<code>dispatch_at(power)</code>","text":"<p>Request that the electricity source adjust its generation to at most <code>power</code> MW, or to its maximum capacity, if <code>power</code> is greater than the nominal capacity.</p> <p>Parameters:</p> Name Type Description Default <code>power</code> <code>Power</code> <p>The requested power generation.</p> required <p>Returns:</p> Type Description <code>Power</code> <p>Net power generation of the source after the dispatch request.</p>"},{"location":"source/#electric_waltz.source.DispatchableSource.shut_down","title":"<code>shut_down()</code>","text":"<p>Request the power source to shut down, i.e. turn of all electricity generation.</p>"},{"location":"source/#electric_waltz.source.NonDispatchableSource","title":"<code>NonDispatchableSource</code>","text":"<p>               Bases: <code>PowerSource</code></p> <p>Class representing non-dispatchable (inflexible) power plants. These are typically renewable sources, such as photovoltaic power plants or wind turbines. This class may also be used for nuclear power plants that are used for a constant base load, i.e. with no dispatch capabilities.</p>"},{"location":"source/#electric_waltz.source.PowerSource","title":"<code>PowerSource</code>","text":"<p>General class representing sources that generate electricity in the grid. These are typically conventional or renewable power plants.</p>"},{"location":"source/#electric_waltz.source.PowerSource.generation","title":"<code>generation</code>  <code>property</code>","text":"<p>Return gross power generation of the source in MWh. This is equal to the nominal capacity multiplied by the capacity factor.</p>"},{"location":"source/#electric_waltz.source.PowerSource.name","title":"<code>name</code>  <code>property</code>","text":"<p>Return the source's textual identifier.</p>"},{"location":"source/#electric_waltz.source.PowerSource.net_generation","title":"<code>net_generation</code>  <code>property</code>","text":"<p>Return net power generation of the source in MWh. This amount is equal to gross generation minus the source's self-consumption.</p>"},{"location":"source/#electric_waltz.source.PowerSource.utilisation","title":"<code>utilisation</code>  <code>property</code> <code>writable</code>","text":"<p>Return the source's capacity factor.</p>"},{"location":"source/#electric_waltz.source.PowerSource.__init__","title":"<code>__init__(name, nominal, *, self_consumption=0.0, utilisation=1.0)</code>","text":"<p>Create an electricity source object.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Short textual identifier of the source, e.g. \"wind\" or \"nuclear\".</p> required <code>nominal</code> <code>Power</code> <p>Nominal (or nameplate, installed) capacity of the source in MW.</p> required <code>self_consumption</code> <code>float</code> <p>Portion of generated power that is consumed by the source itself to keep running. A number in the range [0, 1].</p> <code>0.0</code> <code>utilisation</code> <code>float</code> <p>Initial utilisation (or capacity factor) of the source. A number in the range [0, 1].</p> <code>1.0</code>"},{"location":"source/#electric_waltz.source.ThermalPowerPlant","title":"<code>ThermalPowerPlant</code>","text":"<p>               Bases: <code>DispatchableSource</code></p> <p>A thermal-like power plant with limited flexibility capabilities. This can be used to model, for instance, lignite and hard coal-fired plants or OCGT/CCGT gas plants.</p>"},{"location":"source/#electric_waltz.source.ThermalPowerPlant.__init__","title":"<code>__init__(name, nominal, *, self_consumption=0.0, min_load=0.0, min_downtime=0, min_uptime=0, startup_time=0)</code>","text":"<p>Create an electricity source object.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Short textual identifier of the source, e.g. \"wind\" or \"nuclear\".</p> required <code>nominal</code> <code>Power</code> <p>Nominal (or nameplate, installed) capacity of the source in MW.</p> required <code>self_consumption</code> <code>float</code> <p>Portion of generated power that is consumed by the source itself to keep running. A number in the range [0, 1].</p> <code>0.0</code> <code>min_load</code> <code>float</code> <p>Minimum required load when generating electricity. A number in the range [0, 1].</p> <code>0.0</code> <code>min_downtime</code> <code>int</code> <p>...</p> <code>0</code> <code>min_uptime</code> <code>int</code> <p>...</p> <code>0</code> <code>startup_time</code> <code>int</code> <p>Number of time steps it takes to start the source from cold, i.e. time before it reaches <code>min_load</code> of utilisation.</p> <code>0</code>"},{"location":"source/#electric_waltz.source.ThermalPowerPlant.dispatch_at","title":"<code>dispatch_at(power)</code>","text":"<p>Request that the electricity source adjust its generation to at most <code>power</code> MW, or to its maximum capacity, if <code>power</code> is greater than the nominal capacity.</p> <p>Parameters:</p> Name Type Description Default <code>power</code> <code>Power</code> <p>The requested power generation.</p> required <p>Returns:</p> Type Description <code>Power</code> <p>Net power generation of the source after the dispatch request.</p>"},{"location":"storage/","title":"Storage","text":"<p>Objects for representing electricity storage units and aggregates within the grid.</p>"},{"location":"storage/#electric_waltz.storage.EnergyStorage","title":"<code>EnergyStorage</code>","text":"<p>An object representing the aggregate storage capaciticies of a single kind of storage.</p>"},{"location":"storage/#electric_waltz.storage.EnergyStorage.name","title":"<code>name</code>  <code>property</code>","text":"<p>Return the storage aggregate's textual identifier.</p>"},{"location":"storage/#electric_waltz.storage.EnergyStorage.output","title":"<code>output</code>  <code>property</code>","text":"<p>Return the current power output in MW. Negative if charging, positive if discharging.</p>"},{"location":"storage/#electric_waltz.storage.EnergyStorage.remaining_capacity","title":"<code>remaining_capacity</code>  <code>property</code>","text":"<p>Return the amount of remaining energy storage capacity in MWh.</p>"},{"location":"storage/#electric_waltz.storage.EnergyStorage.__init__","title":"<code>__init__(name, nominal, max_storage, efficiency=1.0)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Short textual identifier of the storage aggregate, e.g. \"p2g\" or \"pumped\".</p> required <code>nominal</code> <code>Power</code> <p>Nominal (installed) capacity of the storage unit in MW.</p> required <code>max_storage</code> <code>Energy</code> <p>Maximum stored energy in MWh.</p> required <code>efficiency</code> <code>float</code> <p>Efficiency of conversion during charging, a number in the interval (0.0, 1.0]. In the current implementation, this is the same as the round-trip efficiency.</p> <code>1.0</code>"},{"location":"storage/#electric_waltz.storage.EnergyStorage.charge_at","title":"<code>charge_at(power)</code>","text":"<p>Try charging the storage unit with up to <code>power</code> MW.</p> <p>Parameters:</p> Name Type Description Default <code>power</code> <code>Power</code> <p>Power that is available for charging in MW.</p> required <p>Returns:</p> Type Description <code>Power</code> <p>Effective charging power in MW.</p>"},{"location":"storage/#electric_waltz.storage.EnergyStorage.discharge_at","title":"<code>discharge_at(power)</code>","text":"<p>Try discharging the storage unit up to <code>required</code> MW.</p> <p>Parameters:</p> Name Type Description Default <code>power</code> <code>Power</code> <p>Power that is requested to be discharged in MW.</p> required <p>Returns:</p> Type Description <code>Power</code> <p>Effective discharging power in MW.</p>"}]}